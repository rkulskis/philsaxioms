name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build shared package
      run: npm run build --workspace=packages/shared
      
    - name: Type check backend
      run: npm run type-check --workspace=packages/backend
      
    - name: Type check frontend  
      run: npm run type-check --workspace=packages/frontend
      
    - name: Run backend tests
      run: npm run test --workspace=packages/backend
      
    - name: Run frontend tests
      run: npm run test --workspace=packages/frontend
      
    - name: Build backend
      run: npm run build --workspace=packages/backend
      
    - name: Build frontend
      run: npm run build --workspace=packages/frontend
      
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      if: success()
      with:
        directory: ./packages/frontend/coverage
        flags: frontend
        
    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      if: success()
      with:
        directory: ./packages/backend/coverage
        flags: backend

  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: ./facio build
      
    - name: Start application
      run: |
        ./facio dev &
        sleep 10
        
    - name: Wait for backend
      run: |
        timeout 30 bash -c 'until curl -s http://localhost:3001/api/health; do sleep 1; done'
        
    - name: Wait for frontend
      run: |
        timeout 30 bash -c 'until curl -s http://localhost:3000; do sleep 1; done'
        
    - name: Test API endpoints
      run: |
        # Test health endpoint
        curl -f http://localhost:3001/api/health
        
        # Test graph data endpoint
        curl -f http://localhost:3001/api/graph
        
        # Test questionnaire endpoint
        curl -f http://localhost:3001/api/questionnaire
        
        # Test session creation
        curl -f -X POST http://localhost:3001/api/sessions \
          -H "Content-Type: application/json" \
          -d '{"acceptedAxioms": ["reality_exists"], "rejectedAxioms": []}'
        
    - name: Test frontend accessibility
      run: |
        # Test that frontend loads
        curl -f http://localhost:3000
        
        # Test that frontend can load JS/CSS assets
        curl -f http://localhost:3000/assets/ || true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Check for known vulnerabilities
      run: |
        npx audit-ci --moderate
        
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, e2e, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for production
      run: ./facio build
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
      
    - name: Deploy to Cloud Run
      run: ./facio deploy --gcloud-push
      env:
        GCLOUD_PROJECT_ID: ${{ secrets.GCLOUD_PROJECT_ID }}
        GCLOUD_REGION: ${{ secrets.GCLOUD_REGION }}